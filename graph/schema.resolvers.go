package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"strconv"

	"github.com/0xanpham/nft-collection/graph/model"
)

// Author is the resolver for the author field.
func (r *collectionResolver) Author(ctx context.Context, obj *model.Collection) (*model.User, error) {
	authorId := obj.AuthorID
	for _, user := range r.users {
		if authorId == user.ID {
			return user, nil
		}
	}
	return nil, nil
}

// Nfts is the resolver for the nfts field.
func (r *collectionResolver) Nfts(ctx context.Context, obj *model.Collection) ([]*model.Nft, error) {
	panic(fmt.Errorf("not implemented: Nfts - nfts"))
}

// CreateCollection is the resolver for the createCollection field.
func (r *mutationResolver) CreateCollection(ctx context.Context, input model.NewCollection) (*model.Collection, error) {
	panic(fmt.Errorf("not implemented: CreateCollection - createCollection"))
}

// CreateNft is the resolver for the createNFT field.
func (r *mutationResolver) CreateNft(ctx context.Context, input model.NewNft) (*model.Nft, error) {
	tokenURI := fmt.Sprintf("%s-%s", input.Address, input.TokenID)
	id := strconv.Itoa(len(r.nfts) + 1)
	var newNFT model.Nft = model.Nft{
		ID:       id,
		TokenID:  input.TokenID,
		Address:  input.Address,
		TokenURI: tokenURI,
	}
	r.nfts = append(r.nfts, &newNFT)
	return &newNFT, nil
}

// Collections is the resolver for the collections field.
func (r *queryResolver) Collections(ctx context.Context) ([]*model.Collection, error) {
	panic(fmt.Errorf("not implemented: Collections - collections"))
}

// Nfts is the resolver for the nfts field.
func (r *queryResolver) Nfts(ctx context.Context) ([]*model.Nft, error) {
	return r.nfts, nil
}

// Collection returns CollectionResolver implementation.
func (r *Resolver) Collection() CollectionResolver { return &collectionResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type collectionResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
