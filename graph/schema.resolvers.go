package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"github.com/0xanpham/nft-collection/graph/model"
	"github.com/0xanpham/nft-collection/services/collection"
	"github.com/0xanpham/nft-collection/services/nft"
)

var nftService = nft.Init()
var collectionService = collection.Init()

// Author is the resolver for the author field.
func (r *collectionResolver) Author(ctx context.Context, obj *model.Collection) (*model.User, error) {
	return nil, nil
}

// Nfts is the resolver for the nfts field.
func (r *collectionResolver) Nfts(ctx context.Context, obj *model.Collection) ([]*model.Nft, error) {
	panic(fmt.Errorf("not implemented: Nfts - nfts"))
}

// CreateCollection is the resolver for the createCollection field.
func (r *mutationResolver) CreateCollection(ctx context.Context, input model.NewCollection) (*model.Collection, error) {
	return collectionService.Create(input), nil
}

// CreateNft is the resolver for the createNFT field.
func (r *mutationResolver) CreateNft(ctx context.Context, input model.NewNft) (*model.Nft, error) {
	return nftService.Create(input), nil
}

// Collections is the resolver for the collections field.
func (r *queryResolver) Collections(ctx context.Context) ([]*model.Collection, error) {
	panic(fmt.Errorf("not implemented: Collections - collections"))
}

// Nfts is the resolver for the nfts field.
func (r *queryResolver) Nfts(ctx context.Context) ([]*model.Nft, error) {
	return nil, nil
}

// Collection returns CollectionResolver implementation.
func (r *Resolver) Collection() CollectionResolver { return &collectionResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type collectionResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
